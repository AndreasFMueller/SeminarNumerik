/*
 * exp.cpp - Beispiele zur Verschmierung bei der Summierung der Exopnentialreihe
 *
 * (c) 2020 Prof Dr Andreas Müller, Hochschule Rapperswil
 */
#include <cstdlib>
#include <cmath>
#include <iostream>
#include <fstream>
#include <ios>
#include <iomanip>

std::ofstream	texpaths("exppaths.tex");

void	texheaders() {
	texpaths << "%" << std::endl;
	texpaths << "% exppaths.tex -- generated by exp.cpp" << std::endl;
	texpaths << "%" << std::endl;
	texpaths << "% (c) 2020 Prof Dr Andreas Müller, Hochschule Rapperswil";
	texpaths << std::endl;
	texpaths << "%" << std::endl;
}

template<typename T>
double	summe(double x0, int n) {
	double	m = 0;
	T	x = x0;
	texpaths << "\\def\\pfad" << typeid(x).name() << "#1{" << std::endl;
	texpaths << "\\fill[color=#1] (0,0) circle[radius=\\r];" << std::endl;
	texpaths << std::fixed;
	T	term = 1.;
	T	s = 1.;
	int	k = 0;
	while (k < n) {
		term *= x / ++k;
		s += term;
		texpaths << std::setprecision(0);
		texpaths << "\\fill[color=#1] ({" << k << "*\\xskala},{";
		texpaths << std::setprecision(2);
		double	m0 = log10(fabs(term));
		texpaths << m0 << "*\\yskala})";
		texpaths << " circle[radius=\\r];" << std::endl;
		if (m0 > m) {
			m = m0;
		}
	}
	texpaths << "}" << std::endl;
	std::cout << std::fixed << std::setprecision(0);
	std::cout << "exp(" << x << ") = ";
	std::cout << std::setprecision(10) << std::scientific;
	std::cout << s << std::endl;
	return m;
}

int	main(int argc, char *argv[]) {
	int	N = 120;
	double	x = -30;

	std::cout << "Typ: float" << std::endl;
	summe<float>(x, N);

	std::cout << "Typ: double" << std::endl;
	summe<double>(x, N);

	std::cout << "Typ: long double" << std::endl;
	double	m = summe<long double>(x, N);

	double	l = expl(x);
	std::cout << "expl(" << x << ") = " << l << std::endl;

	texpaths << "\\def\\pluslinie#1{" << std::endl;
	double	ll = log10(l);
	texpaths << "\\draw[color=#1] (0,{" << ll  << "*\\yskala})";
	texpaths << "--({" << N << "*\\xskala},{" << ll << "*\\yskala});";
	texpaths << std::endl;
	texpaths << "\\node[color=#1] at ({0.5*" << N << "*\\xskala},{";
	texpaths << ll << "*\\yskala})";
	texpaths << std::fixed << std::setprecision(0);
	texpaths << " [below] {$e^{" << x << "}$};" << std::endl;
	texpaths << "}" << std::endl;

	texpaths << "\\def\\minuslinie#1{" << std::endl;
	texpaths << "\\draw[color=#1] (0,{" << (-ll)  << "*\\yskala})";
	texpaths << "--({" << N << "*\\xskala},{" << (-ll) << "*\\yskala});";
	texpaths << std::endl;
	texpaths << "\\node[color=#1] at ({0.5*" << N << "*\\xskala},{";
	texpaths << (-ll) << "*\\yskala})";
	texpaths << std::fixed << std::setprecision(0);
	texpaths << " [above] {$e^{" << (-x) << "}$};" << std::endl;
	texpaths << "}" << std::endl;

	texpaths << std::setprecision(4);

	texpaths << "\\def\\maxlinie#1{" << std::endl;
	double	h = m;
	texpaths << "\\draw[color=#1,line width=0.5] (0,{" << h << "*\\yskala})--({";
	texpaths << N << "*\\xskala},{" << h << "*\\yskala});" << std::endl;
	texpaths << "}" << std::endl;

	texpaths << "\\def\\grenzef#1#2{" << std::endl;
	h = m - 24 * log10(2);
	texpaths << "\\draw[color=#1] (0,{" << h << "*\\yskala})--({";
	texpaths << N << "*\\xskala},{" << h << "*\\yskala});" << std::endl;
	texpaths << "\\node[color=#1] at ({0.3*" << N << "*\\xskala},{";
	texpaths << h << "*\\yskala}) [above] {#2};" << std::endl;
	texpaths << "}" << std::endl;

	texpaths << "\\def\\grenzed#1#2{" << std::endl;
	h = m - 52 * log10(2);
	texpaths << "\\draw[color=#1] (0,{" << h << "*\\yskala})--({";
	texpaths << N << "*\\xskala},{" << h << "*\\yskala});" << std::endl;
	texpaths << "\\node[color=#1] at ({0.3*" << N << "*\\xskala},{";
	texpaths << h << "*\\yskala}) [below] {#2};" << std::endl;
	texpaths << "}" << std::endl;

	texpaths << "\\def\\grenzee#1#2{" << std::endl;
	h = m - 63 * log10(2);
	texpaths << "\\draw[color=#1] (0,{" << h << "*\\yskala})--({";
	texpaths << N << "*\\xskala},{" << h << "*\\yskala});" << std::endl;
	texpaths << "\\node[color=#1] at ({0.3*" << N << "*\\xskala},{";
	texpaths << h << "*\\yskala}) [below] {#2};" << std::endl;
	texpaths << "}" << std::endl;

	return EXIT_SUCCESS;
}
